# src/controller/generate_watsapp_message_api.py

from flask import session,  request, jsonify, Blueprint

from sqlalchemy.orm import aliased
from sqlalchemy import func

from src import db
from src.model import StudentsDB
from src.model import StudentSessions
from src.model import ClassData

from ..auth.login_required import login_required
from ..permissions.permission_required import permission_required



generate_watsapp_message_api_bp = Blueprint('generate_watsapp_message_api_bp',   __name__)



@generate_watsapp_message_api_bp.route('/generate_watsapp_message_api', methods=["POST"])
@login_required
@permission_required('promote_student')
def generate_message():
    data = request.json
    student_id = data.get('student_id')

    session_id = session["session_id"]

    if not student_id:
        return jsonify({"message": "Missing student ID"}), 400

    PromotedSession = aliased(StudentSessions)
    PromotedClass = aliased(ClassData)
    PreviousSession = aliased(StudentSessions)
    PreviousClass = aliased(ClassData)

    student_data = db.session.query(
        StudentsDB.STUDENTS_NAME,
        StudentsDB.PHONE,
        PromotedClass.CLASS.label("promoted_class"),
        PromotedSession.ROLL.label("promoted_roll"),
        PromotedSession.Due_Amount,

        func.to_char(PromotedSession.created_at, 'FMDay, DD Mon YYYY').label("promoted_date"),
        PreviousClass.CLASS.label("previous_class"),
    ).join(
        PromotedSession,
        (StudentsDB.id == PromotedSession.student_id) &
        (PromotedSession.session_id == session_id)
    ).join(
        PromotedClass,
        PromotedSession.class_id == PromotedClass.id
    ).outerjoin(
        PreviousSession,
        (StudentsDB.id == PreviousSession.student_id) &
        (PreviousSession.session_id == session_id - 1)
    ).outerjoin(
        PreviousClass,
        PreviousSession.class_id == PreviousClass.id
    ).filter(
        StudentsDB.id == student_id
    ).first()
    school_name = session["school_name"]

    message = f'''ЁЯОЙ Congratulations,\nрд╣рдореЗрдВ рдпреЗ рдмрддрд╛рддреЗ рд╣реБрдП рдЕрддреНрдпрдВрдд реЩреБрд╢реА рд╣реЛ рд░рд╣реА рд╣реИ рдХрд┐ _*{student_data.STUDENTS_NAME}*_ рдХрд╛ рдкреНрд░рдореЛрд╢рди Class _*{student_data.previous_class}*_ рд╕реЗ Class _*{student_data.promoted_class}*_ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣реЛ рдЪреБрдХрд╛ рд╣реИ!\n\n\tтЬи рдирдпрд╛ рд░реЛрд▓ рдирдВрдмрд░: _*{student_data.promoted_roll}*_\n\tтП▒я╕П рддрд╛рд░реАрдЦ: _*{student_data.promoted_date}*_\n\nЁЯЩМ рдЖрдкрдХреА рдореЗрд╣рдирдд рд░рдВрдЧ рд▓рд╛рдИ! рдРрд╕реЗ рд╣реА рдЖрдЧреЗ рдмрдврд╝рддреЗ рд░рд╣реЛ, рдЪрдордХрддреЗ рд░рд╣реЛ рдФрд░ рд╣рдо рд╕рдмрдХрд╛ рдирд╛рдо рд░реЛрд╢рди рдХрд░рддреЗ рд░рд╣реЛ! ЁЯМЯ'''
            
    if student_data.Due_Amount:
        message += f'''\n\n ЁЯТ░ рд╢реЗрд╖ рдмрдХрд╛рдпрд╛ рд░рд╛рд╢рд┐: _*{student_data.Due_Amount}*_ рд░реБрдкрдпреЗ, рдХреГрдкрдпрд╛ рдЬрд▓реНрдж рд╕реЗ рдЬрд▓реНрдж рднреБрдЧрддрд╛рди рдХрд░рдиреЗ рдХреА рдХреГрдкрд╛ рдХрд░реЗрдВред ЁЯЩП'''

    message += f'''\nЁЯе│ЁЯОК _*{school_name}*_ рдХрд┐ рддрд░рдл рд╕реЗ рдвреЗрд░реЛрдВ рдмрдзрд╛рдЗрдпрд╛рдБ! ЁЯОКЁЯе│'''

        
    return jsonify({"whatsappMessage": message, "PHONE": student_data.PHONE}), 200
